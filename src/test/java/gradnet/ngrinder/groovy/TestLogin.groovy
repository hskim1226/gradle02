package gradnet.ngrinder.groovy

import HTTPClient.NVPair
import org.junit.FixMethodOrder
import org.junit.Ignore
import org.junit.runners.MethodSorters

import static net.grinder.script.Grinder.grinder
import static org.junit.Assert.*
import static org.hamcrest.Matchers.*
import net.grinder.plugin.http.HTTPRequest
import net.grinder.script.GTest
import net.grinder.script.Grinder
import net.grinder.scriptengine.groovy.junit.GrinderRunner
import net.grinder.scriptengine.groovy.junit.annotation.BeforeThread
import net.grinder.scriptengine.groovy.junit.annotation.BeforeProcess

import org.junit.BeforeClass
import org.junit.Test
import org.junit.runner.RunWith

import HTTPClient.HTTPResponse

/**
 * A simple example using the HTTP plugin that shows the retrieval of a
 * single page via HTTP.
 *
 * This script is auto generated by ngrinder.
 *
 * @author ${userName}
 */
@RunWith(GrinderRunner)
@FixMethodOrder(MethodSorters.NAME_ASCENDING)
class TestLogin {

    public static GTest test;
    public static HTTPRequest request;

    // This method is executed once per a process.
    @BeforeProcess
    public static void beforeClass() {
//        test = new GTest(1, "${name}");
        test = new GTest(1, "Test Basis Save");
        request = new HTTPRequest();
        test.record(request);
        grinder.logger.info("before process.");
    }

    // This method is executed once per a thread.
    @BeforeThread
    public void beforeThread() {
        grinder.statistics.delayReports=true;
        grinder.logger.info("before thread.");
    }

    // This method is continuously executed until you stop the test
    @Test
    public void test0Login(){
//        HTTPResponse result = request.GET("http://localhost:8080/yonsei");
//        HTTPResponse result = request.POST("http://www.gradnet.co.kr/yonsei/j_spring_security_check.do",
//        HTTPResponse result = request.POST("http://localhost:8080/yonsei/j_spring_security_check.do",
        HTTPResponse result = request.POST("http://apexsoft-svr2:8080/yonsei/login",
                nvs([
                    "j_username":"Abc333",
                    "j_password":"Abc333"
                ])
        )

        if (result.statusCode == 301 || result.statusCode == 302) {
            grinder.logger.warn("Warning. The response may not be correct. The response code was {}.", result.statusCode);
        } else {
            assertThat(result.statusCode, is(200));
        }
    }

    @Test
    public void test1BasisEdit(){
        HTTPResponse result = request.POST("http://localhost:8080/yonsei/application/basis/edit",
                nvs([
                        "application.applNo":"88"
                ])
        )

        if (result.statusCode == 301 || result.statusCode == 302) {
            grinder.logger.warn("Warning. The response may not be correct. The response code was {}.", result.statusCode);
        } else {
            assertThat(result.statusCode, is(200));
        }
    }

    @Test
    public void test2AcademyEdit(){
        HTTPResponse result = request.POST("http://localhost:8080/yonsei/application/academy/edit",
                nvs([
                        "application.applNo":"88"
                ])
        )

        if (result.statusCode == 301 || result.statusCode == 302) {
            grinder.logger.warn("Warning. The response may not be correct. The response code was {}.", result.statusCode);
        } else {
            assertThat(result.statusCode, is(200));
        }
    }

    @Test
    public void test3LangCareerEdit(){
        HTTPResponse result = request.POST("http://localhost:8080/yonsei/application/langCareer/edit",
                nvs([
                        "application.applNo":"88"
                ])
        )

        if (result.statusCode == 301 || result.statusCode == 302) {
            grinder.logger.warn("Warning. The response may not be correct. The response code was {}.", result.statusCode);
        } else {
            assertThat(result.statusCode, is(200));
        }
    }

    @Test
    public void test4DocumentEdit(){
        HTTPResponse result = request.POST("http://localhost:8080/yonsei/application/document/edit",
                nvs([
                        "application.applNo":"88"
                ])
        )

        if (result.statusCode == 301 || result.statusCode == 302) {
            grinder.logger.warn("Warning. The response may not be correct. The response code was {}.", result.statusCode);
        } else {
            assertThat(result.statusCode, is(200));
        }
    }

    def nvs(def map) {
        def nvs = []
        map.each {
            key, value ->  nvs.add(new NVPair(key, value))
        }
        return nvs as NVPair[]
    }
}
